"""Create final conjugation cards from analyzed data."""

from typing import List, Dict, Any
from core.stages import Stage, StageResult, StageStatus
from core.context import PipelineContext


class ConjugationCardCreationStage(Stage):
    """Create final conjugation cards from analyzed data"""
    
    def __init__(self, pipeline_config: Dict[str, Any]):
        self.config = pipeline_config
    
    @property
    def name(self) -> str:
        return "create_cards"
    
    @property
    def display_name(self) -> str:
        return "Create Conjugation Cards"
    
    def validate_context(self, context: PipelineContext) -> List[str]:
        """Validate context has required data"""
        errors = []
        
        analyzed_conjugations = context.get('analyzed_conjugations')
        if not analyzed_conjugations:
            errors.append("No analyzed conjugations available (missing 'analyzed_conjugations' in context)")
        elif not isinstance(analyzed_conjugations, list):
            errors.append("Analyzed conjugations must be provided as a list")
        
        return errors
    
    def execute(self, context: PipelineContext) -> StageResult:
        """Create conjugation cards"""
        analyzed_conjugations = context.get('analyzed_conjugations', [])
        
        if not analyzed_conjugations:
            return StageResult.failure(
                "No analyzed conjugations available",
                ["Missing analyzed conjugations"]
            )
        
        created_cards = []
        for conjugation in analyzed_conjugations:
            # Process conjugation into card format
            card = self._create_card_from_conjugation(conjugation)
            created_cards.append(card)
        
        # Store cards for next stage
        context.set('created_cards', created_cards)
        context.set('cards', created_cards)  # For compatibility with shared stages
        
        return StageResult.success(
            f"Created {len(created_cards)} conjugation cards",
            {'cards': created_cards}
        )
    
    def _create_card_from_conjugation(self, conjugation: Dict[str, Any]) -> Dict[str, Any]:
        """Create card from conjugation data"""
        # Convert conjugation analysis into final card format
        card = {
            'CardID': conjugation['CardID'],
            'Front': conjugation['Front'],
            'Back': conjugation['Back'], 
            'Add Reverse': conjugation['Add Reverse'],
            'Sentence': conjugation['Sentence'],
            'Extra': conjugation['Extra'],
            'Picture': f"{conjugation['CardID']}.jpg",  # Will be generated by media stage
            'InfinitiveVerb': conjugation['InfinitiveVerb'],
            'ConjugatedForm': conjugation['ConjugatedForm'],
            'Tense': conjugation['Tense'],
            'Person': conjugation['Person']
        }
        
        return card